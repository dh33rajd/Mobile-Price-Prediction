# -*- coding: utf-8 -*-
"""Copy of DSML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ja7kNLATrRxhlNzcd6LEmXOTBjBvQztA
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn import svm
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV 
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.metrics import f1_score
from sklearn.metrics import precision_score

# %matplotlib inline

dataset=pd.read_csv('Merged_Data.csv')

dataset.head()

dataset.isnull().sum()

dataset.info()

dataset.describe()

plt.figure(figsize=(20,20))
sns.heatmap(dataset.corr(),annot=True)
plt.show()

battery=[]
def myfunction(row):
    if(row[20]==0):
        battery.append(row[0])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(battery).hist()
print(battery)
print(len(battery))

battery=[]
def myfunction(row):
    if(row[20]==1):
        battery.append(row[0])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(battery).hist()
print(len(battery))

battery=[]
def myfunction(row):
    if(row[20]==2):
        battery.append(row[0])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(battery).hist()
print(len(battery))

battery=[]
def myfunction(row):
    if(row[20]==3):
        battery.append(row[0])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(battery).hist()
print(len(battery))

blue=[]
def myfunction(row):
    if(row[20]==0):
        blue.append(row[1])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([blue.count(0),blue.count(1)], labels = ["no bluetooth","has bluetooth"],autopct='%1.1f%%')
plt.legend()
plt.show() 
print(blue)

blue=[]
def myfunction(row):
    if(row[20]==1):
        blue.append(row[1])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([blue.count(0),blue.count(1)], labels= ["no bluetooth","has bluetooth"],autopct='%1.1f%%')
plt.legend()
plt.show()

blue=[]
def myfunction(row):
    if(row[20]==2):
        blue.append(row[1])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([blue.count(0),blue.count(1)], labels = ["no bluetooth","has bluetooth"],autopct='%1.1f%%')
plt.legend()
plt.show()

blue=[]
def myfunction(row):
    if(row[20]==3):
        blue.append(row[1])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([blue.count(0),blue.count(1)], labels = ["no bluetooth","has bluetooth"],autopct='%1.1f%%')
plt.legend()
plt.show()

clk=[]
def myfunction(row):
    if(row[20]==0):
        clk.append(row[2])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(clk).hist()

clk=[]
def myfunction(row):
    if(row[20]==1):
        clk.append(row[2])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(clk).hist()

clk=[]
def myfunction(row):
    if(row[20]==2):
        clk.append(row[2])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(clk).hist()

clk=[]
def myfunction(row):
    if(row[20]==3):
        clk.append(row[2])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(clk).hist()

ds=[]
def myfunction(row):
    if(row[20]==0):
        ds.append(row[3])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([ds.count(0),ds.count(1)], labels = ["no dual sim","dual sim"],autopct='%1.1f%%')
plt.legend()
plt.show()

ds=[]
def myfunction(row):
    if(row[20]==1):
        ds.append(row[3])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([ds.count(0),ds.count(1)], labels = ["no dual sim","dual sim"],autopct='%1.1f%%')
plt.legend()
plt.show()

ds=[]
def myfunction(row):
    if(row[20]==2):
        ds.append(row[3])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([ds.count(0),ds.count(1)], labels = ["no dual sim","dual sim"],autopct='%1.1f%%')
plt.legend()
plt.show()

ds=[]
def myfunction(row):
    if(row[20]==3):
        ds.append(row[3])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([ds.count(0),ds.count(1)], labels = ["no dual sim","dual sim"],autopct='%1.1f%%')
plt.legend()
plt.show()

fc=[]
def myfunction(row):
    if(row[20]==0):
        fc.append(row[4])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(fc).hist()

fc=[]
def myfunction(row):
    if(row[20]==1):
        fc.append(row[4])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(fc).hist()

fc=[]
def myfunction(row):
    if(row[20]==2):
        fc.append(row[4])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(fc).hist()

fc=[]
def myfunction(row):
    if(row[20]==3):
        fc.append(row[4])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(fc).hist()

four_g=[]
def myfunction(row):
    if(row[20]==0):
        four_g.append(row[5])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([four_g.count(0),four_g.count(1)], labels = ["no 4G connectivity","4G connectivity"],autopct='%1.1f%%')
plt.legend()
plt.show()

four_g=[]
def myfunction(row):
    if(row[20]==1):
        four_g.append(row[5])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([four_g.count(0),four_g.count(1)], labels = ["no 4G connectivity","4G connectivity"],autopct='%1.1f%%')
plt.legend()
plt.show()

four_g=[]
def myfunction(row):
    if(row[20]==2):
        four_g.append(row[5])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([four_g.count(0),four_g.count(1)], labels = ["no 4G connectivity","4G connectivity"],autopct='%1.1f%%')
plt.legend()
plt.show()

four_g=[]
def myfunction(row):
    if(row[20]==3):
        four_g.append(row[5])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([four_g.count(0),four_g.count(1)], labels = ["no 4G connectivity","4G connectivity"],autopct='%1.1f%%')
plt.legend()
plt.show()

int_m=[]
def myfunction(row):
    if(row[20]==0):
        int_m.append(row[6])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(int_m).hist()

int_m=[]
def myfunction(row):
    if(row[20]==1):
        int_m.append(row[6])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(int_m).hist()
print(int_m)

int_m=[]
def myfunction(row):
    if(row[20]==2):
        int_m.append(row[6])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(int_m).hist()

int_m=[]
def myfunction(row):
    if(row[20]==3):
        int_m.append(row[6])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(int_m).hist()

var=[]
def myfunction(row):
    if(row[20]==0):
        var.append(row[7])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==1):
        var.append(row[7])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==2):
        var.append(row[7])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==3):
        var.append(row[7])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==0):
        var.append(row[8])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==1):
        var.append(row[8])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==2):
        var.append(row[8])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==3):
        var.append(row[8])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==0):
        var.append(row[9])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==1):
        var.append(row[9])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==2):
        var.append(row[9])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==3):
        var.append(row[9])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==0):
        var.append(row[10])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==1):
        var.append(row[10])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==2):
        var.append(row[10])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==3):
        var.append(row[10])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==0):
        var.append(row[11])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==1):
        var.append(row[11])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==2):
        var.append(row[11])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==3):
        var.append(row[11])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==0):
        var.append(row[12])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==1):
        var.append(row[12])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==2):
        var.append(row[12])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==3):
        var.append(row[12])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==0):
        var.append(row[13])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==1):
        var.append(row[13])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==2):
        var.append(row[13])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==3):
        var.append(row[13])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==0):
        var.append(row[14])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==1):
        var.append(row[14])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==2):
        var.append(row[14])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==3):
        var.append(row[14])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==0):
        var.append(row[15])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==1):
        var.append(row[15])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==2):
        var.append(row[15])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==3):
        var.append(row[15])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==0):
        var.append(row[16])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==1):
        var.append(row[16])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==2):
        var.append(row[16])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==3):
        var.append(row[16])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
pd.DataFrame(var).hist()

var=[]
def myfunction(row):
    if(row[20]==0):
        var.append(row[17])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([var.count(0),var.count(1)], labels = ["no 3G connectivity","3G connectivity"],autopct='%1.1f%%')
plt.legend()
plt.show()

var=[]
def myfunction(row):
    if(row[20]==1):
        var.append(row[17])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([var.count(0),var.count(1)], labels = ["no 3G connectivity","3G connectivity"],autopct='%1.1f%%')
plt.legend()
plt.show()

var=[]
def myfunction(row):
    if(row[20]==2):
        var.append(row[17])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([var.count(0),var.count(1)], labels = ["no 3G connectivity","3G connectivity"],autopct='%1.1f%%')
plt.legend()
plt.show()

var=[]
def myfunction(row):
    if(row[20]==3):
        var.append(row[17])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([var.count(0),var.count(1)], labels = ["no 3G connectivity","3G connectivity"],autopct='%1.1f%%')
plt.legend()
plt.show()

var=[]
def myfunction(row):
    if(row[20]==0):
        var.append(row[18])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([var.count(0),var.count(1)], labels = ["no touch screen","touch screen"],autopct='%1.1f%%')
plt.legend()
plt.show()

var=[]
def myfunction(row):
    if(row[20]==1):
        var.append(row[18])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([var.count(0),var.count(1)], labels = ["no touch screen","touch screen"],autopct='%1.1f%%')
plt.legend()
plt.show()

var=[]
def myfunction(row):
    if(row[20]==2):
        var.append(row[18])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([var.count(0),var.count(1)], labels = ["no touch screen","touch screen"],autopct='%1.1f%%')
plt.legend()
plt.show()

var=[]
def myfunction(row):
    if(row[20]==3):
        var.append(row[18])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([var.count(0),var.count(1)], labels = ["no touch screen","touch screen"],autopct='%1.1f%%')
plt.legend()
plt.show()

var=[]
def myfunction(row):
    if(row[20]==0):
        var.append(row[19])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([var.count(0),var.count(1)], labels = ["no wifi","wifi"],autopct='%1.1f%%')
plt.legend()
plt.show()

var=[]
def myfunction(row):
    if(row[20]==1):
        var.append(row[19])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([var.count(0),var.count(1)], labels = ["no touch screen","touch screen"],autopct='%1.1f%%')
plt.legend()
plt.show()

var=[]
def myfunction(row):
    if(row[20]==2):
        var.append(row[19])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([var.count(0),var.count(1)], labels = ["no touch screen","touch screen"],autopct='%1.1f%%')
plt.legend()
plt.show()

var=[]
def myfunction(row):
    if(row[20]==3):
        var.append(row[19])  
np.apply_along_axis(myfunction,axis=1, arr=dataset)
plt.pie([var.count(0),var.count(1)], labels = ["no touch screen","touch screen"],autopct='%1.1f%%')
plt.legend()
plt.show()